# Mini-project #6 - Blackjack

import simplegui
import random

# load card sprite - 936x384 - source: jfitz.com
CARD_SIZE = (72, 96)
CARD_CENTER = (36, 48)
card_images = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/cards_jfitz.png")

CARD_BACK_SIZE = (72, 96)
CARD_BACK_CENTER = (36, 48)
card_back = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/card_jfitz_back.png")    

# initialize some useful global variables
in_play = False
outcome = ""
score = ""
flip_cards=False

# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}


# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos):
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[0]], CARD_SIZE)
    def draw_back(self, canvas, pos):
        card_loc = (CARD_CENTER[0] + 0, 
                    CARD_CENTER[1] + 0)
        canvas.draw_image(card_back, card_loc, CARD_SIZE, [pos[0]+ CARD_CENTER[0], pos[1]+ CARD_CENTER[0]], CARD_SIZE)
        
# define hand class
class Hand:
    def __init__(self):
        self.hand_list=[]

    def __str__(self):
        ans=""
        for val in self.hand_list:
            ans+=val.get_suit()+val.get_rank()+" "
        return ans
    def add_card(self, card):
        self.hand_list.append(card)

    def get_value(self):
        # count aces as 1, if the hand has an ace, then add 10 to hand value if it doesn't bust
        current_val=0
        thereisA=False
        for i in range(len(self.hand_list)):
            if thereisA==False:
                if self.hand_list[i].get_rank()=="A":
                    current_val+=VALUES[self.hand_list[i].get_rank()]
                    thereisA=True
                else:
                    current_val+=VALUES[self.hand_list[i].get_rank()]
            elif thereisA==True:
                if self.hand_list[i].get_rank()=="A":
                    current_val+=10
                else:
                    current_val+=VALUES[self.hand_list[i].get_rank()]
        return current_val
    def draw(self, canvas, pos):
        for i in range(len(self.hand_list)):
            self.hand_list[i].draw(canvas,[pos[0]+i*72,pos[1]])
    def draw_computer(self, canvas, pos):
        for i in range(len(self.hand_list)):
            if i!=0:
                self.hand_list[i].draw(canvas,[pos[0]+i*72,pos[1]])
            else:
                self.hand_list[i].draw_back(canvas,[pos[0]+i*72,pos[1]])
 
        
# define deck class 
class Deck:
    def __init__(self):
        self.deck_list=[]
        for suit in SUITS:
            for rank in RANKS:
                self.deck_list.append(Card(suit,rank))

    def shuffle(self):
        random.shuffle(self.deck_list)

    def deal_card(self):
        first_card=self.deck_list.pop()
        mano.add_card(first_card)
        second_card=self.deck_list.pop()
        mano.add_card(second_card)
        third_card=self.deck_list.pop()
        computer.add_card(third_card)
        fourth_card=self.deck_list.pop()
        computer.add_card(fourth_card)
    
    def __str__(self):
        ans=""
        for val in self.deck_list:
            ans+=val.get_suit()+val.get_rank()+" "
        return ans


mano=Hand()
computer=Hand()
baraja = Deck()
#define event handlers for buttons
def deal():
    global outcome, in_play, score

    # your code goes here
    outcome="hit or stand"
    
    in_play = True
    baraja.shuffle()
    baraja.deal_card()
    score=mano.get_value()

def hit():
    global outcome,score
    if mano.get_value()<=21:
        card = baraja.deck_list.pop()
        mano.add_card(card)
        score=mano.get_value()
        print str(mano)
        outcome = "hit"
    else:
        in_play=False
        outcome="player loose"
        print "you are busted"
    # if the hand is in play, hit the player
   
    # if busted, assign a message to outcome, update in_play and score
    
       
def stand():
    global outcome,flip_cards
    flip_cards=True
    if mano.get_value()<=21:
        if in_play==True:
            while computer.get_value()<=17:
                card=baraja.deck_list.pop()
                computer.add_card(card)
                computer.get_value()
                print str(computer)
            if mano.get_value()>computer.get_value():
                outcome = "player win"
                print "player wins"
            else:
                if computer.get_value()>=21:
                    outcome = "player win"
                else:
                    outcome = "computer win"
    else:
        outcome = "player loose"
        print "you already loose"        
    
    # if hand is in play, repeatedly hit dealer until his hand has value 17 or more

    # assign a message to outcome, update in_play and score

# draw handler    
def draw(canvas):
    # test to make sure that card.draw works, replace with your code below

    mano.draw(canvas,[50,90])
    if flip_cards==False:
        computer.draw_computer(canvas,[50,380])
    else:
        computer.draw(canvas,[50,380])
    canvas.draw_text("Black Jack",[230,30],35,"Red")
    canvas.draw_text(outcome,[400,220],24,"White")
    canvas.draw_text(str(score),[350,220],24,"White")
# initialization frame
frame = simplegui.create_frame("Blackjack", 600, 600)
frame.set_canvas_background("Green")

#create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)

# get things rolling

frame.start()
print "player hand"
print str(mano)
print str(mano.get_value())
print "computer hand"
print str(computer)
print str(computer.get_value())
print str(baraja)
# remember to review the gradic rubric
